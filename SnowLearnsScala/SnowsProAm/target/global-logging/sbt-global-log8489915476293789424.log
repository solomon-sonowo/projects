[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\snows\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\snows\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.9.6 (Oracle Corporation Java 1.8.0_202)
[debug]       Load.loadUnit: plugins took 168.7205ms
[debug]       Load.loadUnit: defsScala took 0.2633ms
[debug] [Loading] Scanning directory C:\Users\snows\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\snows\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 23.6316 ms
[debug]           Load.resolveProject(global-plugins) took 55.5541ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\snows\.sbt\1.0\plugins, plugins: List(<none>))) took 112.7299ms
[debug] [Loading] Done in C:\Users\snows\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 136.8448ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.198ms
[debug]     Load.loadUnit(file:/C:/Users/snows/.sbt/1.0/plugins/, ...) took 312.1023ms
[debug]   Load.apply: load took 504.1866ms
[debug]   Load.apply: resolveProjects took 5.3406ms
[debug]   Load.apply: finalTransforms took 52.5222ms
[debug]   Load.apply: config.delegates took 8.8352ms
[debug]   Load.apply: Def.make(settings)... took 304.8772ms
[debug]   Load.apply: structureIndex took 83.8459ms
[debug]   Load.apply: mkStreams took 1.3189ms
[info] loading global plugins from C:\Users\snows\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 2129.7605ms
[debug]           Load.loadUnit: plugins took 21.9535ms
[debug]           Load.loadUnit: defsScala took 0.0027ms
[debug] [Loading] Scanning directory C:\Users\snows\OneDrive\Desktop\SnowLearns\SnowLearnsScala\SnowsProAm\project
[debug]             Load.loadUnit: mkEval took 9.4726ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\snows\OneDrive\Desktop\SnowLearns\SnowLearnsScala\SnowsProAm\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.3926 ms
[info] loading settings for project snowsproam-build from idea.sbt ...
[debug]               Load.resolveProject(snowsproam-build) took 3.1548ms
[debug]             Load.loadTransitive: finalizeProject(Project(id snowsproam-build, base: C:\Users\snows\OneDrive\Desktop\SnowLearns\SnowLearnsScala\SnowsProAm\project, plugins: List(<none>))) took 6.1026ms
[debug] [Loading] Done in C:\Users\snows\OneDrive\Desktop\SnowLearns\SnowLearnsScala\SnowsProAm\project, returning: (snowsproam-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 1963.6747ms
[debug]           Load.loadUnit: cleanEvalClasses took 4.7682ms
[debug]         Load.loadUnit(file:/C:/Users/snows/OneDrive/Desktop/SnowLearns/SnowLearnsScala/SnowsProAm/project/, ...) took 1991.45ms
[debug]       Load.apply: load took 1993.353ms
[debug]       Load.apply: resolveProjects took 0.1404ms
[debug]       Load.apply: finalTransforms took 15.0123ms
[debug]       Load.apply: config.delegates took 0.5506ms
[debug]       Load.apply: Def.make(settings)... took 83.1183ms
[debug]       Load.apply: structureIndex took 23.6727ms
[debug]       Load.apply: mkStreams took 0.0028ms
[info] loading project definition from C:\Users\snows\OneDrive\Desktop\SnowLearns\SnowLearnsScala\SnowsProAm\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 3503.6067ms
[debug]     Load.loadUnit: defsScala took 0.0027ms
[debug] [Loading] Scanning directory C:\Users\snows\OneDrive\Desktop\SnowLearns\SnowLearnsScala\SnowsProAm
[debug]       Load.loadUnit: mkEval took 0.4803ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.5647 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 28.1143ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\snows\OneDrive\Desktop\SnowLearns\SnowLearnsScala\SnowsProAm, plugins: List(<none>))) took 31.2381ms
[debug] [Loading] Done in C:\Users\snows\OneDrive\Desktop\SnowLearns\SnowLearnsScala\SnowsProAm, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 1050.8262ms
[debug]     Load.loadUnit: cleanEvalClasses took 7.192ms
[debug]   Load.loadUnit(file:/C:/Users/snows/OneDrive/Desktop/SnowLearns/SnowLearnsScala/SnowsProAm/, ...) took 4562.2939ms
[debug] Load.apply: load took 4563.9752ms
[debug] Load.apply: resolveProjects took 0.1308ms
[debug] Load.apply: finalTransforms took 24.3109ms
[debug] Load.apply: config.delegates took 0.55ms
[debug] Load.apply: Def.make(settings)... took 63.5304ms
[debug] Load.apply: structureIndex took 18.5573ms
[debug] Load.apply: mkStreams took 0.0033ms
[info] set current project to SnowsProAm (in build file:/C:/Users/snows/OneDrive/Desktop/SnowLearns/SnowLearnsScala/SnowsProAm/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 62468 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 62468, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to SnowsProAm (in build file:/C:/Users/snows/OneDrive/Desktop/SnowLearns/SnowLearnsScala/SnowsProAm/)
[debug] > Exec(idea-shell, None, None)
